{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC with 2 public subnets and an Auto Scaling group",
    "Mappings": {
        "SubnetConfig": {
            "VPC": { "CIDR": "10.0.0.0/16" },
            "Public": { "CIDR": "10.0.0.0/24" },
            "Public1": { "CIDR": "10.0.2.0/24" }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" }
                 ]
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" },
                    { "Key": "Name", "Value": "Public" }
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" }] },
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public1"},
                    { "Key": "Name", "Value": "Public1"}
                ]
            }
        },
       
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" }},
                    { "Key": "Network", "Value": "Public"}
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway"}
            }
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" }
                ]
            }
        },
   
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": { 
                "SubnetId": { "Ref": "PublicSubnet" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet1" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName"}},
                    { "Key": "Network", "Value": "Public" }
                ]
            }
        },
        "InboundHTTPPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl"},
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "80", "To": "80" }
            }
        },
        "InboundSSHPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "22", "To": "22"}
            }
        },
        "InboundEmphemeralPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "103",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "1024", "To": "65535" }
            }
        },
        "OutboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "0", "To": "65535" }
            }
        },
        "PublicSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },
        "PublicSubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet1" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to the EC2 host",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },
        "SGBaseIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "EC2SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "4",
                    "MinInstancesInService": "1"
                }
            },
            "DependsOn": "LaunchConfig",
            "Properties": {
                "VPCZoneIdentifier": [ { "Ref": "PrivateSubnet1" } ],
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "MinSize": "2",
                "MaxSize": "4"
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "NATGateway",
            "Properties": {
                "ImageId": "ami-0b33d91d",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum update -y\n",
                                "yum install httpd -y\n",
                                "service httpd start\n",
                                "chkconfig httpd on"
                            ]
                        ]
                    }
                },
                "SecurityGroups": [ { "Ref": "EC2SecurityGroup" } ],
                "InstanceType": "t2.micro"
            }
        }
    }
}
