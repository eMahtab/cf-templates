{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC with 2 public subnets and an Auto Scaling group",
    "Parameters": {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
          },
        "ApplicationBucket": {
            "Description": "Source bucket containing application code",
            "Type": "String"
        },
        "BuildNumber": {
            "Description": "Build version of the application",
            "Type": "String"
        }
    },    
    "Mappings": {
        "SubnetConfig": {
            "VPC": { "CIDR": "10.0.0.0/16" },
            "Public": { "CIDR": "10.0.0.0/24" },
            "Public1": { "CIDR": "10.0.2.0/24" }
        }
    },
    "Resources": {

        "EC2S3AccessRole" :{
            "Type": "AWS::IAM::Role",
            "Properties": {
                  "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{ "Effect": "Allow",
                                    "Principal": {"Service": ["ec2.amazonaws.com"]},
                                    "Action": ["sts:AssumeRole"] }]
                  },
                  "Path": "/",
                  "Policies": [{
                    "PolicyName" : "S3FullAccess",
                    "PolicyDocument" : {
                       "Version": "2012-10-17",
                       "Statement": [{
                           "Effect": "Allow",
                           "Action": [
                            "s3:*"
                            ],
                          "Resource": "*"
                      }]
                    }
                 }]
            }
        },

        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
               "Path": "/",
               "Roles": [ { "Ref": "EC2S3AccessRole" } ]
            }
        },

        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" }
                 ]
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" },
                    { "Key": "Name", "Value": "Public" }
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "CIDR"] },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public1"},
                    { "Key": "Name", "Value": "Public1"}
                ]
            }
        },
       
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" }},
                    { "Key": "Network", "Value": "Public"}
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway"}
            }
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName" } },
                    { "Key": "Network", "Value": "Public" }
                ]
            }
        },
   
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": { 
                "SubnetId": { "Ref": "PublicSubnet" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet1" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Application", "Value": { "Ref": "AWS::StackName"}},
                    { "Key": "Network", "Value": "Public" }
                ]
            }
        },
        "InboundHTTPPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl"},
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "80", "To": "80" }
            }
        },
        "InboundSSHPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "22", "To": "22"}
            }
        },
        "InboundEmphemeralPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "103",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "1024", "To": "65535" }
            }
        },
        "OutboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "0", "To": "65535" }
            }
        },
        "PublicSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },
        "PublicSubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet1" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to the EC2 host",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to the ELB on port 80",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },

        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
              "SecurityGroups" : [{ "Fn::GetAtt": [ "ELBSecurityGroup", "GroupId"] }],
              "Scheme" : "internet-facing", 
              "Subnets": [ { "Ref" : "PublicSubnet" }, { "Ref" : "PublicSubnet1" } ],
              "Listeners": [
                {
                  "InstancePort": "80",
                  "InstanceProtocol": "HTTP",
                  "LoadBalancerPort": "80",
                  "Protocol": "HTTP"
                }
              ],
              "HealthCheck": {
                "Target": "HTTP:80/index.html",
                "Timeout": "5",
                "Interval": "10",
                "UnhealthyThreshold": "2",
                "HealthyThreshold": "3"
              }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1",
                    "MinInstancesInService": "1",
                    "WaitOnResourceSignals": "true",
                    "PauseTime": "PT5M"
                }
            },
            "DependsOn": "LaunchConfig",
            "Properties": {
                "VPCZoneIdentifier": [{"Ref": "PublicSubnet"},{"Ref": "PublicSubnet1"}],
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "MinSize": "1",
                "DesiredCapacity": "4",
                "MaxSize": "4",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": "120",
                "LoadBalancerNames": [ { "Ref": "LoadBalancer" } ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                  "Count": 4,
                  "Timeout": "PT10M"
                }
              }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress" : "true",
                "ImageId": "ami-04681a1dbd79675a5",
                "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex \n",
                                "yum update -y\n",
                                "yum install httpd -y\n",
                                "service httpd start\n",
                                "chkconfig httpd on\n",
                                "aws s3 cp s3://", {"Ref": "ApplicationBucket"},"/builds/", {"Ref": "BuildNumber"},"/index.html /var/www/html/index.html \n",
                                "/opt/aws/bin/cfn-signal -e $? --region ", {"Ref": "AWS::Region"}, " --stack ", {"Ref": "AWS::StackName"}, " --resource WebServerGroup", "\n" 
                            ]
                        ]
                    }
                },
                "SecurityGroups": [{"Ref": "EC2SecurityGroup"}],
                "KeyName" : { "Ref" : "KeyName" },
                "InstanceType": "t2.micro"
            }
        }
    },
    "Outputs": {
        "ELB": {
          "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}]]},
          "Description": "Load Balancer URL"
        }
      }
}
